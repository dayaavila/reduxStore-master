{"version":3,"sources":["components/common/Button/Button.tsx","components/Screens/InciarProceso/IniciarProceso.tsx","components/Screens/Incidencias/Incidencias.tsx","components/Screens/PararProceso/PararProceso.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Button","this","props","onClick","className","color","type","value","text","bind","React","IniciarProceso","Incidencias","placeholder","cols","rows","PararProceso","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUASaA,G,kBAAb,kLAGYC,KAAKC,MAAMC,SAASF,KAAKC,MAAMC,YAH3C,+BAOQ,OACI,yBAAOC,UAAWH,KAAKC,MAAMG,MACtBC,KAAM,SACNC,MAAON,KAAKC,MAAMM,KAClBL,QAASF,KAAKE,QAAQM,KAAKR,YAX9C,GAA4BS,cCLfC,EAAb,iLAGY,OACI,2BACI,sBAAIP,UAAW,qBAAf,mBAEA,2BACI,gBAAC,EAAD,CAAQI,KAAM,WACNH,MAAO,yBAIf,gBAAC,EAAD,CAAQG,KAAM,WACNH,MAAO,yBAIf,gBAAC,EAAD,CAAQG,KAAM,WACNH,MAAO,WAKnB,gBAAC,EAAD,CAAQG,KAAM,sBACNH,MAAO,kBAzBnC,+KAAoCK,aCAvBE,G,MAAb,iLAMQ,OACI,2BACE,sBAAIR,UAAW,oBAAf,wBACA,4BAAUS,YAAa,kBAAgBC,KAAM,GAAIC,KAAM,KACrD,2BACI,gBAAC,EAAD,CAAQP,KAAM,WACNH,MAAO,mCAIf,gBAAC,EAAD,CAAQG,KAAM,UACNH,MAAO,cAjBnC,qFAAiCK,cCApBM,G,MAAb,iLAEQ,OACI,2BACI,sBAAIZ,UAAW,sBAAf,iBAEA,2BACI,gBAAC,EAAD,CAAQI,KAAM,gBACNH,MAAO,UAKnB,2BACI,gBAAC,EAAD,CAAQG,KAAM,sBACNH,MAAO,mBAfnC,qGAAkCK,cCOrBO,EAAb,iLAKQ,OACI,6BACI,yBAAKb,UAAW,kBACZ,kBAAC,EAAD,OAGJ,yBAAKA,UAAW,eAChB,kBAAC,EAAD,OAGA,yBAAKA,UAAW,gBACd,kBAAC,EAAD,YAhBlB,GAAyBM,IAAMQ,WCCXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4d2e7197.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './Button.css';\r\n\r\ninterface ButtonProps {\r\n    text: string;\r\n    color: string;\r\n    onClick?: any;\r\n}\r\n\r\nexport class Button extends React.Component <ButtonProps, any> {\r\n\r\n     onClick(){\r\n        if (this.props.onClick) this.props.onClick();\r\n     }\r\n\r\n    render(){\r\n        return(\r\n            <input className={this.props.color}\r\n                   type={'button'}\r\n                   value={this.props.text}\r\n                   onClick={this.onClick.bind(this)}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport './IniciarProceso.css';\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\nexport class IniciarProceso extends React.Component {\r\n\r\n        render(){\r\n            return(\r\n                <div>\r\n                    <h2 className={'tituloInitProceso'}>Iniciar Proceso</h2>\r\n\r\n                    <div>\r\n                        <Button text={\"Button 1\"}\r\n                                color={'green buttonsInitial'}\r\n                                // onClickStart={this.onClickStart.bind(this)}\r\n                        />\r\n\r\n                        <Button text={\"Button 2\"}\r\n                                color={'green buttonsInitial'}\r\n                                //onClickStop={this.onClickStop.bind(this)}\r\n                        />\r\n\r\n                        <Button text={\"Button 3\"}\r\n                                color={'green'}\r\n                                // onClickDelete={this.onClickDelete.bind(this)}\r\n                        />\r\n                    </div>\r\n\r\n                    <Button text={\"Reportar Incidencia\"}\r\n                            color={'redSizeBig'}\r\n                            // onClickReportIncidence={this.onClickReportIncidence.bind(this)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        /*-----Métodos-----*/\r\n\r\n        onClickStart(){\r\n\r\n        }\r\n\r\n        onClickStop(){\r\n\r\n        }\r\n\r\n        onClickDelete(){\r\n\r\n        }\r\n\r\n        onClickReportIncidence(){\r\n\r\n        }\r\n}","import * as React from \"react\";\r\nimport './Incidencias.css';\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\nexport class Incidencias extends React.Component {\r\n    // constructor(props){\r\n    //     super(props);\r\n    // }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n              <h2 className={'tituloIncidencia'}>Reportar Incidencias</h2>\r\n              <textarea placeholder={'Escribe aquí'} cols={40} rows={10}/>\r\n                <div>\r\n                    <Button text={'Cancelar'}\r\n                            color={'redSizeSmall IncidenciaButtons'}\r\n                            // onClickSave={this.onClickSave.bind(this)}\r\n                    />\r\n\r\n                    <Button text={'Guardar'}\r\n                            color={'green'}\r\n                            // onClickCancel={this.onClickCancel.bind(this)}\r\n                    />\r\n                </div>\r\n            </div>);\r\n    }\r\n\r\n\r\n    /*-----Métodos-----*/\r\n\r\n    onClickSave(){\r\n\r\n    }\r\n\r\n    onClickCancel(){\r\n\r\n    }\r\n}","import * as React from \"react\";\r\nimport './PararProceso.css';\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\nexport class PararProceso extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2 className={'tituloPararProceso'}>Parar Proceso</h2>\r\n\r\n                <div>\r\n                    <Button text={'Parar Proceso'}\r\n                            color={'blue'}\r\n                            // onClickStopProcess={this.onClickStopProcess.bind(this)}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <Button text={'Reportar Incidencia'}\r\n                            color={'redSizeBig'}\r\n                            // onClickReportIncidence={this.onClickReportIncidence.bind(this)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    /*-----Métodos-----*/\r\n\r\n    onClickStopProcess(){\r\n\r\n    }\r\n\r\n    onClickReportIncidence(){\r\n\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\n/*---- New ----*/\r\n//import {Button} from \"./components/common/Button/Button\";\r\nimport {IniciarProceso} from './components/Screens/InciarProceso/IniciarProceso';\r\nimport {Incidencias}  from \"./components/Screens/Incidencias/Incidencias\";\r\nimport {PararProceso} from './components/Screens/PararProceso/PararProceso';\r\n\r\n\r\n/*----- Valores que recibe de .tsx al interface*/\r\nexport class App extends React.Component {\r\n\r\n    // const store = redux.createStore(reducer,[initialState], [enhacer])\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div className={'iniciarProceso'}>\r\n                    <IniciarProceso/>\r\n                </div>\r\n\r\n                <div className={'incidencias'}>\r\n                <Incidencias/>\r\n                </div>\r\n\r\n                <div className={'pararProceso'}>\r\n                  <PararProceso/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}